#include <iostream>
#include <stack>
#include <queue>
#include <set>
#include <map>

using namespace std;

int main () {

	// 1 - stack

	stack<int> s;
	cout << s.size ()  << endl; // outputs 0
	s.push (1);
	s.push (2);
	cout << s.top ()   << endl; // outputs 2
	s.pop ();
	cout << s.top ()   << endl; // outputs 1
	cout << s.size ()  << endl; // outputs 1

	// 2 - stack

	queue<int> q;
	cout << q.size ()  << endl; // outputs 0
	q.push (1);
	q.push (2);
	cout << q.front () << endl; // outputs 1
	q.pop ();
	cout << q.front () << endl; // outputs 2
	cout << q.size ()  << endl; // outputs 1

	// 3 - priority queue

	priority_queue<int> pq;
	cout << pq.size () << endl; // outputs 0
	pq.push (3);
	pq.push (1);
	pq.push (2);
	cout << pq.top ()  << endl; // outputs 3
	pq.pop ();
	cout << pq.top ()  << endl; // outputs 2
	cout << pq.size () << endl; // outputs 2

	// 4 - multiset

	multiset<int> ms;
	cout << ms.size () << endl;                       // outputs 0
	ms.insert (1);                                    // ms = {1}
	ms.insert (2);                                    // ms = {1,2}
	ms.insert (1);                                    // ms = {1,1,2}
	auto it = ms.find (1);
	cout << (it != ms.end () ? "FOUND" : "") << endl; // outputs FOUND
	cout << ms.size () << endl;                       // outputs 3

	// 5 - multimap

	multimap<int, int> mm;
	cout << mm.size () << endl;                       // outputs 0
	mm.insert ({ 1,2 });                              // ms = {(1,2)}
	mm.insert ({ 2,4 });                              // ms = {(1,2),(2,4)}
	mm.insert ({ 1,3 });                              // ms = {(1,2),(1,3),(2,4)}
	auto i = mm.find (2);
	cout << (i != mm.end () ? i->second : 0) << endl; // outputs 4
	cout << mm.size () << endl;                       // outputs 3

	return 0;
}
